{"ast":null,"code":"import _defineProperty from \"/home/mwurzberger/Code/Sandbox/mg-test/mystandalone/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/mwurzberger/Code/Sandbox/mg-test/mystandalone/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mwurzberger/Code/Sandbox/mg-test/mystandalone/src/components/ship/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { fetchShipById, createShip, updateShip } from '../../actions/shipActions';\nconst classifications = ['Starfighter', 'Freighter', 'Capital'];\n\nfunction Ship({\n  shipId,\n  fetchShipById,\n  selectedShip: {\n    data: shipData,\n    isLoading,\n    error\n  }\n}) {\n  console.log('Ship() Entry'); // Local state\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        classification = _useState4[0],\n        setClassification = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        positions = _useState6[0],\n        setPositions = _useState6[1]; // Go out and fetch the ship data if the shipId is set\n  // Only repeat if a new shipId is passed in\n\n\n  useEffect(() => {\n    console.log('useEffect() - fetch', shipId);\n\n    if (shipId && shipId !== '') {\n      console.log('useEffect() - fetch - running');\n      fetchShipById(shipId);\n    }\n  }, [shipId, fetchShipById]); // Map the loaded ship into the local state when it is \n  // finally updated in redux\n\n  useEffect(() => {\n    console.log('useEffect() - mapping to local', shipData);\n\n    if (shipId === shipData.id && isLoading === false) {\n      console.log('useEffect() - mapping to local - running');\n      setName(shipData.name);\n      setClassification(shipData.classification);\n      setPositions(shipData.positions);\n    }\n  }, [shipId, shipData, isLoading]);\n\n  const handleSave = event => {\n    event.preventDefault();\n    console.log('handleSave');\n\n    const newShip = _objectSpread({}, shipData, {\n      name,\n      classification,\n      positions\n    });\n\n    if (shipId) {\n      createShip(newShip);\n    } else {\n      updateShip(newShip);\n    }\n  };\n\n  console.log('Ship() return/render');\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, !_.isEmpty(error) && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Error\"), \"\".concat(error.name, \" - \").concat(error.message || error.errmsg)), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, shipId), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Name:\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Classification:\"), React.createElement(\"select\", {\n    value: classification,\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, classifications.map(entry => React.createElement(\"option\", {\n    value: entry,\n    key: entry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, entry)))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Positions:\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, JSON.stringify(positions, null, 4))), React.createElement(\"button\", {\n    onClick: e => handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Save\"));\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedShip: state.selectedShip\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchShipById\n})(Ship);","map":{"version":3,"sources":["/home/mwurzberger/Code/Sandbox/mg-test/mystandalone/src/components/ship/index.js"],"names":["React","useState","useEffect","connect","_","fetchShipById","createShip","updateShip","classifications","Ship","shipId","selectedShip","data","shipData","isLoading","error","console","log","name","setName","classification","setClassification","positions","setPositions","id","handleSave","event","preventDefault","newShip","isEmpty","message","errmsg","e","target","value","map","entry","JSON","stringify","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport {\n    fetchShipById,\n    createShip,\n    updateShip,\n} from '../../actions/shipActions';\n\nconst classifications =  ['Starfighter', 'Freighter', 'Capital'];\n\nfunction Ship({ shipId, fetchShipById, selectedShip: { data: shipData, isLoading, error } }) {\n    console.log('Ship() Entry');\n\n    // Local state\n    const [name, setName] = useState('');\n    const [classification, setClassification] = useState('');\n    const [positions, setPositions] = useState([]);\n\n    // Go out and fetch the ship data if the shipId is set\n    // Only repeat if a new shipId is passed in\n    useEffect(() => {\n        console.log('useEffect() - fetch', shipId);\n        if (shipId && shipId !== '') {\n            console.log('useEffect() - fetch - running');\n            fetchShipById(shipId);\n        }\n    }, [shipId, fetchShipById])\n\n    // Map the loaded ship into the local state when it is \n    // finally updated in redux\n    useEffect(() => {\n        console.log('useEffect() - mapping to local', shipData);\n        if (shipId === shipData.id && isLoading === false) {\n            console.log('useEffect() - mapping to local - running');\n            setName(shipData.name);\n            setClassification(shipData.classification);\n            setPositions(shipData.positions);\n        }\n    }, [shipId, shipData, isLoading])\n\n    const handleSave = event => {\n        event.preventDefault();\n        console.log('handleSave');\n\n        const newShip = {\n            ...shipData,\n            name,\n            classification,\n            positions,\n        }\n\n        if (shipId) {\n            createShip(newShip);\n        } else {\n            updateShip(newShip);\n        }\n    }\n\n    console.log('Ship() return/render');\n    return (\n        <div>\n            {\n                !_.isEmpty(error) && <span>\n                    <h3>Error</h3>\n                    {`${error.name} - ${error.message || error.errmsg}`}\n                </span>\n            }\n            <h3>{shipId}</h3>\n            <div>\n                <label>Name:</label>\n                <input type=\"text\" id=\"name\" value={name} onChange={e => setName(e.target.value)}/>\n            </div>\n            <div>\n                <label>Classification:</label>\n                <select value={classification} onChange={e => setName(e.target.value)}>\n                    {classifications.map((entry) => (<option value={entry} key={entry}>{entry}</option>))}\n                </select>\n            </div>\n            <div>\n                <div>Positions:</div>\n                <div>\n                    {JSON.stringify(positions, null, 4)}\n                </div>\n            </div>\n            <button onClick={e => handleSave}>Save</button>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        selectedShip: state.selectedShip,\n    }\n}\n\nexport default connect(mapStateToProps, {fetchShipById})(Ship);\n"]},"metadata":{},"sourceType":"module"}