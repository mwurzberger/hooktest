{"ast":null,"code":"import _slicedToArray from \"/home/mwurzberger/Code/Sandbox/mg-test/mystandalone/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mwurzberger/Code/Sandbox/mg-test/mystandalone/src/components/ship/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { fetchShipById } from '../../actions/shipActions';\nconst classifications = ['Starfighter', 'Freighter', 'Capital'];\n\nfunction Ship(props) {\n  console.log('Ship() Entry');\n  const id = props.shipId || ''; // Local state\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        error = _useState2[0],\n        setError = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        name = _useState4[0],\n        setName = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        classification = _useState6[0],\n        setClassification = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        positions = _useState8[0],\n        setPositions = _useState8[1]; // Go out and fetch the ship data if the shipId is set\n  // Only repeat if a new shipId is passed in\n\n\n  useEffect(() => {\n    console.log('useEffect() - fetch', props.shipId);\n\n    if (props.shipId && props.shipId !== '') {\n      console.log('useEffect() - fetch - running');\n      props.fetchShipById(props.shipId);\n    }\n  }, [props, props.shipId]); // Map the loaded ship into the local state when it is \n  // finally updated in redux\n\n  useEffect(() => {\n    console.log('useEffect() - mapping to local', props.selectedShip);\n    const ship = props.selectedShip.data;\n\n    if (props.shipId === ship.id && props.selectedShip.isLoading === false) {\n      console.log('useEffect() - mapping to local - running');\n      setName(ship.name);\n      setClassification(ship.classification);\n      setPositions(ship.positions);\n    }\n  }, [props, props.selectedShip]);\n\n  const handleSave = (event, getShips) => {\n    event.preventDefault();\n    console.log('handleSave');\n    const ship = {\n      id,\n      name,\n      classification,\n      positions\n    };\n  };\n\n  console.log('Ship() return/render');\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, !_.isEmpty(error) && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Error\"), \"\".concat(error.name, \" - \").concat(error.message || error.errmsg)), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, id), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Name:\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Classification:\"), React.createElement(\"select\", {\n    value: classification,\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, classifications.map(entry => React.createElement(\"option\", {\n    value: entry,\n    key: entry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, entry)))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Positions:\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, JSON.stringify(positions, null, 4))), React.createElement(\"button\", {\n    onClick: e => handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Save\"));\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedShip: state.selectedShip\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchShipById\n})(Ship);","map":{"version":3,"sources":["/home/mwurzberger/Code/Sandbox/mg-test/mystandalone/src/components/ship/index.js"],"names":["React","useState","useEffect","connect","useSelector","useDispatch","_","fetchShipById","classifications","Ship","props","console","log","id","shipId","error","setError","name","setName","classification","setClassification","positions","setPositions","selectedShip","ship","data","isLoading","handleSave","event","getShips","preventDefault","isEmpty","message","errmsg","e","target","value","map","entry","JSON","stringify","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\n\nimport {fetchShipById} from '../../actions/shipActions';\n\nconst classifications =  ['Starfighter', 'Freighter', 'Capital'];\n\nfunction Ship(props) {\n    console.log('Ship() Entry');\n\n    const id = props.shipId || '';\n\n    // Local state\n    const [error, setError] = useState({});\n    const [name, setName] = useState('');\n    const [classification, setClassification] = useState('');\n    const [positions, setPositions] = useState([]);\n\n    // Go out and fetch the ship data if the shipId is set\n    // Only repeat if a new shipId is passed in\n    useEffect(() => {\n        console.log('useEffect() - fetch', props.shipId);\n        if (props.shipId && props.shipId !== '') {\n            console.log('useEffect() - fetch - running');\n            props.fetchShipById(props.shipId);\n        }\n    }, [props, props.shipId])\n\n    // Map the loaded ship into the local state when it is \n    // finally updated in redux\n    useEffect(() => {\n        console.log('useEffect() - mapping to local', props.selectedShip);\n        const ship = props.selectedShip.data;\n        if (props.shipId === ship.id && props.selectedShip.isLoading === false) {\n            console.log('useEffect() - mapping to local - running');\n            setName(ship.name);\n            setClassification(ship.classification);\n            setPositions(ship.positions);\n        }\n    }, [props, props.selectedShip])\n\n    const handleSave = (event, getShips) => {\n        event.preventDefault();\n        console.log('handleSave');\n\n        const ship = {\n            id,\n            name,\n            classification,\n            positions,\n        }\n    }\n\n    console.log('Ship() return/render');\n    return (\n        <div>\n            {\n                !_.isEmpty(error) && <span>\n                    <h3>Error</h3>\n                    {`${error.name} - ${error.message || error.errmsg}`}\n                </span>\n            }\n            <h3>{id}</h3>\n            <div>\n                <label>Name:</label>\n                <input type=\"text\" id=\"name\" value={name} onChange={e => setName(e.target.value)}/>\n            </div>\n            <div>\n                <label>Classification:</label>\n                <select value={classification} onChange={e => setName(e.target.value)}>\n                    {classifications.map((entry) => (<option value={entry} key={entry}>{entry}</option>))}\n                </select>\n            </div>\n            <div>\n                <div>Positions:</div>\n                <div>\n                    {JSON.stringify(positions, null, 4)}\n                </div>\n            </div>\n            <button onClick={e => handleSave}>Save</button>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        selectedShip: state.selectedShip,\n    }\n}\n\nexport default connect(mapStateToProps, {fetchShipById})(Ship);\n"]},"metadata":{},"sourceType":"module"}